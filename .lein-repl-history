(use 'midje.repl)
 (autotest)
ls
(partial = 0)
((partial = 0) 1)
((partial = 0) 0)
(count "1")
(clojure.string/matches "3" 1)
(> 100 "2")
(> (num 100) "2")
(> 100 (num "2"))
(num 1)
(num 1.0)
(doc num)
(defn string->integer [s] 
  (when-let [d (re-find #"-?\d+" s)] (Integer. d)))
(string->integer "21")
(string->integer "aa")
g s
(and true nil)
(not-any? #(nil? %) [])
(not-any? #(nil? %) [a])
(not-any? #(nil? %) [:a])
(not-any? #(nil? %) [nil])
(seq {:a 1 :b 2})
(map #(-> %2)(seq {:a 1 :b 2})) 
(map #(-> %2) (seq {:a 1 :b 2})) 
(map #(-> %1) (seq {:a 1 :b 2})) 
(doc mapv)
(seq {:a 1 :b 2})
(first (seq {:a 1 :b 2}))
(second (seq {:a 1 :b 2}))
(map #(-> %) (seq {:a 1 :b 2}))
(map #(first %) (seq {:a 1 :b 2}))
(map #(second %) (seq {:a 1 :b 2}))
